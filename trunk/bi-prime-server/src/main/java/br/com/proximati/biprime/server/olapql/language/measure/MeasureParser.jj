/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MeasureParser.jj */
/*@egen*/options 
{ 
    STATIC = false;
                             
                        
                 
                   
                                 
                                        
                                    
}

PARSER_BEGIN (MeasureParser)
package br.com.proximati.biprime.server.olapql.language.measure;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class MeasureParser/*@bgen(jjtree)*/implements MeasureParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTMeasureParserState jjtree = new JJTMeasureParserState();

/*@egen*/

    public static void main(String args[]) {
        InputStream in = new ByteArrayInputStream(
              ("soma(-1 / (100.8 + 2)) + [Total]").getBytes());

        MeasureParser parser = new MeasureParser(in);
        
        try {
            SimpleNode node = parser.measureExpression();
            node.dump(" ");
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
    }
}
PARSER_END (MeasureParser)

SKIP : { " " | "\t" | "\n" | "\r" | "\f" }

TOKEN [IGNORE_CASE] :
{
  < RELATIONAL_OPERATOR: ">" | "<" | ">=" | "<=" | "=" | "<>" >
| < AGGREGATOR: "quantidade" | "m\u00e9dia" | "m\u00e1ximo" | "m\u00ednimo" | "soma" >
| < IDENTIFIER: ("\"" (~["\""])* "\"") >
| < PLUS: "+" >
| < MINUS: "-" >
| < MULT: "*" >
| < DIV: "/" >
| < LBRA: "[" >
| < RBRA: "]" >
| < DATE: ((["0"-"9"])+ "/" (["0"-"9"])+ "/" (["0"-"9"])+) >
| < METADATA_OBJECT_NAME: <LBRA> (~["[","]"])+ <RBRA> >
| < FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? 
                             | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? 
                             | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
                             | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"] >
| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < INTEGER_LITERAL : ["0"-"9"] (["0"-"9"])* >
| < STRING_LITERAL: "\"" (<CHAR>)* "\"" > 
| < #CHAR: (~["\""] | "\\" (["n","r","\\","\'","\""])) >
}

SimpleNode measureExpression()                    :
{/*@bgen(jjtree) MeasureExpression */
  ASTMeasureExpression jjtn000 = new ASTMeasureExpression(JJTMEASUREEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) MeasureExpression */
    try {
/*@egen*/
    aggregationExpression() <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/

    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void aggregationExpression() : 
{
}
{
    aggregationAdditiveExpression() 
}

void aggregationAdditiveExpression()               :
{/*@bgen(jjtree) #Addition(> 1) */
    ASTAddition jjtn000 = new ASTAddition(JJTADDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String op = null;
}
{/*@bgen(jjtree) #Addition(> 1) */
    try {
/*@egen*/
    ( aggregationMultiplicativeExpression() ( ( op = additiveOperator() ) aggregationMultiplicativeExpression() )* )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      jjtc000 = false;
    }
/*@egen*/

    {
        jjtn000.value = op;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void aggregationMultiplicativeExpression()                     :
{/*@bgen(jjtree) #Multiplication(> 1) */
    ASTMultiplication jjtn000 = new ASTMultiplication(JJTMULTIPLICATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String op = null;
}
{/*@bgen(jjtree) #Multiplication(> 1) */
    try {
/*@egen*/
    ( measureAtom() ( ( op = multiplicativeOperator() ) measureAtom() )* )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      jjtc000 = false;
    }
/*@egen*/

    {
        jjtn000.value = op;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void measureAtom() :
{
}
{
    "(" aggregationExpression() ")" | aggregation() | measure()
}

void measure()          : 
{/*@bgen(jjtree) Measure */
    ASTMeasure jjtn000 = new ASTMeasure(JJTMEASURE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Measure */
    try {
/*@egen*/
    t = <METADATA_OBJECT_NAME>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/

    {
        jjtn000.value = t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void aggregation()              :
{/*@bgen(jjtree) Aggregation */
    ASTAggregation jjtn000 = new ASTAggregation(JJTAGGREGATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Aggregation */
    try {
/*@egen*/
    t = <AGGREGATOR> 

    "(" arithmeticExpression() ")"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/

    {
        jjtn000.value = t.image;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void arithmeticExpression() : 
{
}
{
    additiveExpression() 
}

void additiveExpression()               :
{/*@bgen(jjtree) #Addition(> 1) */
    ASTAddition jjtn000 = new ASTAddition(JJTADDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String op = null;
}
{/*@bgen(jjtree) #Addition(> 1) */
    try {
/*@egen*/
    ( multiplicativeExpression() ( ( op = additiveOperator() ) multiplicativeExpression() )* )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      jjtc000 = false;
    }
/*@egen*/

    {
        jjtn000.value = op;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

String additiveOperator() :
{
    Token t;
}
{
    ( t = <PLUS> | t = <MINUS> )

    {
        return t.image;
    }
}

void multiplicativeExpression()                     :
{/*@bgen(jjtree) #Multiplication(> 1) */
    ASTMultiplication jjtn000 = new ASTMultiplication(JJTMULTIPLICATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String op = null;
}
{/*@bgen(jjtree) #Multiplication(> 1) */
    try {
/*@egen*/
    ( arithmeticAtom() ( ( op = multiplicativeOperator() ) arithmeticAtom() )* )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      jjtc000 = false;
    }
/*@egen*/

    {
        jjtn000.value = op;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

String multiplicativeOperator() :
{
    Token t;
}
{
    ( t = <MULT> | t = <DIV> )

    {
        return t.image;
    }
}

void arithmeticAtom() :
{
}
{
    "(" arithmeticExpression() ")" | column() | number()
}

void column()         :
{/*@bgen(jjtree) Column */
    ASTColumn jjtn000 = new ASTColumn(JJTCOLUMN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token column;
}
{/*@bgen(jjtree) Column */
    try {
/*@egen*/
    ( column = <IDENTIFIER> | column = <STRING_LITERAL> )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/

    {
        jjtn000.value = column.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void number()         :
{/*@bgen(jjtree) Number */
    ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token minus = null;
    Token number;
}
{/*@bgen(jjtree) Number */
    try {
/*@egen*/
    [ minus = <MINUS> ]

    ( number = <INTEGER_LITERAL> | number = <FLOATING_POINT_LITERAL> )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/

    {
        jjtn000.value = minus == null ? number.image : minus.image + number.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
