/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. QueryParser.jj */
/*@egen*/options
{
   STATIC = false;
                            
                       
                
                  
                                
                            
                                   
}

PARSER_BEGIN(QueryParser)
package br.com.proximati.biprime.server.olapql.language.query;
import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class QueryParser/*@bgen(jjtree)*/implements QueryParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTQueryParserState jjtree = new JJTQueryParserState();

/*@egen*/
   private boolean rows = false;

   private boolean columns = false;

   public static void main(String args [])
   {
      String s = "selecione [Teste] nas colunas, [Teste] nas linhas do cubo [Vendas] onde n\u00e3o (1 > [n\u00edvel].[propriedade]) e 1 = 1 ou [filtro]";
      InputStream in = new ByteArrayInputStream(s.getBytes());
      QueryParser parser = new QueryParser(in);
      try
      {
         SimpleNode node = parser.select();
         node.dump(" ");
      }
      catch (ParseException ex)
      {
         ex.printStackTrace();
      }
   }

   private void fixChildren(Node node)
   {
      for (int i = 0; i < node.jjtGetNumChildren(); i++)
      {
         node.jjtGetChild(i).jjtSetParent(node);
         fixChildren(node.jjtGetChild(i));
      }
   }
}

PARSER_END(QueryParser)

SKIP :
{
   " "
|  "\t"
|  "\n"
|  "\r"
|  "\f"
}

TOKEN [ IGNORE_CASE ] :
{
   < RELATIONAL_OPERATOR :
      ">"
   |  "<"
   |  ">="
   |  "<="
   |  "="
   |  "<>" >
|  < NOT : "n\u00e3o" >
|  < AND : "e" >
|  < OR : "ou" >
|  < DOT : "." >
|  < PLUS : "+" >
|  < MINUS : "-" >
|  < MULT : "*" >
|  < DIV : "/" >
|  < LBRA : "[" >
|  < RBRA : "]" >
|  < LPAREN : "(" >
|  < RPAREN : ")" >
|  < COMMA : "," >
|  < LBRACE : "{" >
|  < RBRACE : "}" >
|  < DATE :
      (
         ([ "0"-"9" ])+ "/" ([ "0"-"9" ])+ "/" ([ "0"-"9" ])+
      ) >
|  < SELECT : "selecione" >
|  < ON : "nas" >
|  < ROWS : "linhas" >
|  < COLUMNS : "colunas" >
|  < FROM : "do" >
|  < CUBE : "cubo" >
|  < WHERE : "onde" >
|  < IN : "pertence" >
|  < LIKE : "cont\u00e9m" >
|  < STARTS_WITH : "come\u00e7a com" >
|  < ENDS_WITH : "termina com" >
|  < METADATA_OBJECT_NAME : < LBRA > (~[ "[", "]" ])+ < RBRA > >
|  < FLOATING_POINT_LITERAL :
      ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< EXPONENT >)? ([ "f", "F", "d", "D" ])?
   |  "." ([ "0"-"9" ])+ (< EXPONENT >)? ([ "f", "F", "d", "D" ])?
   |  ([ "0"-"9" ])+ < EXPONENT > ([ "f", "F", "d", "D" ])?
   |  ([ "0"-"9" ])+ (< EXPONENT >)? [ "f", "F", "d", "D" ] >
|  < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
|  < INTEGER_LITERAL : [ "0"-"9" ] ([ "0"-"9" ])* >
|  < STRING_LITERAL : "\"" (< CHAR >)* "\"" >
|  < #CHAR :
      (
         ~[ "\"" ]
      |  "\\" ([ "n", "r", "\\", "\'", "\"" ])
      ) >
}

SimpleNode select()         :
{/*@bgen(jjtree) Select */
  ASTSelect jjtn000 = new ASTSelect(JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Select */
   try {
/*@egen*/
   < SELECT > axis() < COMMA > axis() < FROM > < CUBE > cube() [ < WHERE >/*@bgen(jjtree) FilterExpression */
                                                                           {
                                                                             ASTFilterExpression jjtn001 = new ASTFilterExpression(JJTFILTEREXPRESSION);
                                                                             boolean jjtc001 = true;
                                                                             jjtree.openNodeScope(jjtn001);
                                                                           }
                                                                           try {
/*@egen*/ filterExpression()/*@bgen(jjtree)*/
                                                                           } catch (Throwable jjte001) {
                                                                             if (jjtc001) {
                                                                               jjtree.clearNodeScope(jjtn001);
                                                                               jjtc001 = false;
                                                                             } else {
                                                                               jjtree.popNode();
                                                                             }
                                                                             if (jjte001 instanceof RuntimeException) {
                                                                               throw (RuntimeException)jjte001;
                                                                             }
                                                                             if (jjte001 instanceof ParseException) {
                                                                               throw (ParseException)jjte001;
                                                                             }
                                                                             throw (Error)jjte001;
                                                                           } finally {
                                                                             if (jjtc001) {
                                                                               jjtree.closeNodeScope(jjtn001, true);
                                                                             }
                                                                           }
/*@egen*/                   ] < EOF >/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
      return jjtn000;
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void axis()       :
{/*@bgen(jjtree) Axis */
   ASTAxis jjtn000 = new ASTAxis(JJTAXIS);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   java.util.List < SimpleNode > nodes = new java.util.ArrayList < SimpleNode > ();
   String axis;
}
{/*@bgen(jjtree) Axis */
   try {
/*@egen*/
   (
      set(nodes) < ON >
      (
         axis = rows()
      |  axis = columns()
      )
   )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
      // desconsidera os children adicionados pelo jjtree atrav\u00e9s do m\u00e9todo closeNodeScope
      jjtn000.children = null;
      for (SimpleNode node : nodes)
      {
         jjtn000.jjtAddChild(node, jjtn000.jjtGetNumChildren());
         node.jjtSetParent(jjtn000);
      }
      fixChildren(jjtn000);
      jjtn000.value = axis;
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

String rows() :
{}
{
   {
      if (rows) throw new ParseException("O eixo das linhas foi duplicado");
      else rows = true;
   }
   < ROWS >
   {
      return "ROWS";
   }
}

String columns() :
{}
{
   {
      if (columns) throw new ParseException("O eixo das colunas foi duplicado");
      else columns = true;
   }
   < COLUMNS >
   {
      return "COLUMNS";
   }
}

void set(java.util.List < SimpleNode > nodes) :
{
   SimpleNode node = null;
}
{
   (
      node = node()
      {
         nodes.add(node);
      }
   |
      (
         LOOKAHEAD(3)
         < LBRACE > node = node()
         {
            nodes.add(node);
         }
         (
            < COMMA > set(nodes)
         )*
         < RBRACE >
      |  < LBRACE > set(nodes) < RBRACE >
      )
   )
}

SimpleNode node() :
{
   SimpleNode node;
}
{
   (
      node = metadataObject()
   |  node = crossJoin()
   )
   {
      return node;
   }
}

SimpleNode metadataObject() :
{
   SimpleNode node = null;
}
{
   (
      LOOKAHEAD(2)
      node = propertyNode()
   |  node = levelOrMeasureOrFilter()
   )
   {
      return node;
   }
}

SimpleNode levelOrMeasureOrFilter()                         :
{/*@bgen(jjtree) LevelOrMeasureOrFilter */
   ASTLevelOrMeasureOrFilter jjtn000 = new ASTLevelOrMeasureOrFilter(JJTLEVELORMEASUREORFILTER);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) LevelOrMeasureOrFilter */
   try {
/*@egen*/
   (t = < METADATA_OBJECT_NAME >)/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
      jjtn000.value = t.image;
      return jjtn000;
   }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

SimpleNode propertyNode()               :
{/*@bgen(jjtree) PropertyNode */
   ASTPropertyNode jjtn000 = new ASTPropertyNode(JJTPROPERTYNODE);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
   String property;
}
{/*@bgen(jjtree) PropertyNode */
   try {
/*@egen*/
   (t = < METADATA_OBJECT_NAME >
   {
      property = t.image;
   }
   < DOT > t = < METADATA_OBJECT_NAME >)/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
      property += "." + t.image;
      jjtn000.value = property;
      return jjtn000;
   }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

SimpleNode crossJoin() :
{
   SimpleNode firstArgument;
   java.util.List < SimpleNode > secondArgument = new java.util.ArrayList < SimpleNode > ();
}
{
   (
      < LPAREN > firstArgument = metadataObject() < COMMA > set(secondArgument) < RPAREN >
   )
   {
      for (SimpleNode node : secondArgument)
      {
         firstArgument.jjtAddChild(node, firstArgument.jjtGetNumChildren());
         node.jjtSetParent(firstArgument);
      }
      return firstArgument;
   }
}

/* ************************ */
/* ******* METADATA ******* */
/* ************************ */
void level()        :
{/*@bgen(jjtree) Level */
   ASTLevel jjtn000 = new ASTLevel(JJTLEVEL);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) Level */
   try {
/*@egen*/
   t = < METADATA_OBJECT_NAME >/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
      jjtn000.value = t.image;
   }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void filter()         :
{/*@bgen(jjtree) Filter */
   ASTFilter jjtn000 = new ASTFilter(JJTFILTER);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) Filter */
   try {
/*@egen*/
   t = < METADATA_OBJECT_NAME >/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
      jjtn000.value = t.image;
   }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

SimpleNode property()           :
{/*@bgen(jjtree) Property */
   ASTProperty jjtn000 = new ASTProperty(JJTPROPERTY);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
   String property;
}
{/*@bgen(jjtree) Property */
   try {
/*@egen*/
   (t = < METADATA_OBJECT_NAME >
   {
      property = t.image;
   }
   < DOT > t = < METADATA_OBJECT_NAME >)/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
      property += "." + t.image;
      jjtn000.value = property;
      return jjtn000;
   }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void cube()       :
{/*@bgen(jjtree) Cube */
   ASTCube jjtn000 = new ASTCube(JJTCUBE);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) Cube */
   try {
/*@egen*/
   t = < METADATA_OBJECT_NAME >/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
      jjtn000.value = t.image;
   }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

/* ********************** */
/* ******* FILTER ******* */
/* ********************** */
SimpleNode detachedFilterExpression()                           :
{/*@bgen(jjtree) DetachedFilterExpression */
  ASTDetachedFilterExpression jjtn000 = new ASTDetachedFilterExpression(JJTDETACHEDFILTEREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ /* Esta produ\u00e7\u00e3o \u00e9 utilizada apenas para fazer parsing de um filtro fora de uma consulta */ }
{/*@bgen(jjtree) DetachedFilterExpression */
   try {
/*@egen*/
   filterExpression() <EOF>/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/

   {
      return jjtn000;
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void filterExpression() :
{}
{
   orCondition()
}

void orCondition()                 
:
{/*@bgen(jjtree) #OrCondition(> 1) */
  ASTOrCondition jjtn000 = new ASTOrCondition(JJTORCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #OrCondition(> 1) */
   try {
/*@egen*/
   (
      andCondition()
      (
         < OR > andCondition()
      )*
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
     }
   }
/*@egen*/
}

void andCondition()                  
:
{/*@bgen(jjtree) #AndCondition(> 1) */
  ASTAndCondition jjtn000 = new ASTAndCondition(JJTANDCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AndCondition(> 1) */
   try {
/*@egen*/
   (
      condition()
      (
         < AND > condition()
      )*
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
     }
   }
/*@egen*/
}

void condition()               
:
{/*@bgen(jjtree) #Condition(> 1) */
  ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Condition(> 1) */
   try {
/*@egen*/
   (
      negation()
   |
      (
         LOOKAHEAD(2)
         operand() conditionRightHandSide()
      |  filter()
      )
   |  < LPAREN > filterExpression() < RPAREN >
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
     }
   }
/*@egen*/
}

void negation()           :
{/*@bgen(jjtree) Negation */
  ASTNegation jjtn000 = new ASTNegation(JJTNEGATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Negation */
   try {
/*@egen*/
   < NOT >
   (
      condition()
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void operand() :
{}
{
   summand()
}

void conditionRightHandSide() :
{}
{
   compare() operand()
|  inExpression()
|  likeExpression()
|  startsWithExpression()
|  endsWithExpression()
}

void inExpression()               :
{/*@bgen(jjtree) InExpression */
  ASTInExpression jjtn000 = new ASTInExpression(JJTINEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InExpression */
   try {
/*@egen*/
   < IN > < LPAREN > value()
   (
      < COMMA > value()
   )*
   < RPAREN >/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void likeExpression()                 :
{/*@bgen(jjtree) LikeExpression */
  ASTLikeExpression jjtn000 = new ASTLikeExpression(JJTLIKEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LikeExpression */
   try {
/*@egen*/
   < LIKE > operand()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void startsWithExpression()                       :
{/*@bgen(jjtree) StartsWithExpression */
  ASTStartsWithExpression jjtn000 = new ASTStartsWithExpression(JJTSTARTSWITHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StartsWithExpression */
   try {
/*@egen*/
   < STARTS_WITH > operand()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void endsWithExpression()                     :
{/*@bgen(jjtree) EndsWithExpression */
  ASTEndsWithExpression jjtn000 = new ASTEndsWithExpression(JJTENDSWITHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EndsWithExpression */
   try {
/*@egen*/
   < ENDS_WITH > operand()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void compare()          :
{/*@bgen(jjtree) Compare */
   ASTCompare jjtn000 = new ASTCompare(JJTCOMPARE);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) Compare */
   try {
/*@egen*/
   t = < RELATIONAL_OPERATOR >/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
      jjtn000.value = t.image;
   }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void summand()                        
:
{/*@bgen(jjtree) #AdditiveExpression(> 1) */
   ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(JJTADDITIVEEXPRESSION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   String op = null;
}
{/*@bgen(jjtree) #AdditiveExpression(> 1) */
   try {
/*@egen*/
   (
      factor()
      (
         (
            op = additiveOperator()
         )
         factor()
      )*
   )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
     jjtc000 = false;
   }
/*@egen*/
   {
      jjtn000.value = op;
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
     }
   }
/*@egen*/
}

String additiveOperator() :
{
   Token t;
}
{
   (
      t = < PLUS >
   |  t = < MINUS >
   )
   {
      return t.image;
   }
}

void factor()                              
:
{/*@bgen(jjtree) #MultiplicativeExpression(> 1) */
   ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   String op = null;
}
{/*@bgen(jjtree) #MultiplicativeExpression(> 1) */
   try {
/*@egen*/
   (
      term()
      (
         (
            op = multiplicativeOperator()
         )
         term()
      )*
   )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
     jjtc000 = false;
   }
/*@egen*/
   {
      jjtn000.value = op;
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
     }
   }
/*@egen*/
}

String multiplicativeOperator() :
{
   Token t;
}
{
   (
      t = < MULT >
   |  t = < DIV >
   )
   {
      return t.image;
   }
}

void term() :
{}
{
   value()
|  property()
}

void value() :
{}
{
   numberLiteral()
|  dateLiteral()
|  stringLiteral()
}

/* **************************** */
/* ********* LITERALS ********* */
/* **************************** */
void numberLiteral()                :
{/*@bgen(jjtree) NumberLiteral */
   ASTNumberLiteral jjtn000 = new ASTNumberLiteral(JJTNUMBERLITERAL);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token minus = null;
   Token number;
}
{/*@bgen(jjtree) NumberLiteral */
   try {
/*@egen*/
   [ minus = < MINUS > ]
   (
      number = < INTEGER_LITERAL >
   |  number = < FLOATING_POINT_LITERAL >
   )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
      jjtn000.value = minus == null ? number.image : minus.image + number.image;
   }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void dateLiteral()              :
{/*@bgen(jjtree) DateLiteral */
   ASTDateLiteral jjtn000 = new ASTDateLiteral(JJTDATELITERAL);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) DateLiteral */
   try {
/*@egen*/
   t = < DATE >/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
      jjtn000.value = t.image;
   }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void stringLiteral()                :
{/*@bgen(jjtree) StringLiteral */
   ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) StringLiteral */
   try {
/*@egen*/
   t = < STRING_LITERAL >/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
      jjtn000.value = t.image;
   }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
