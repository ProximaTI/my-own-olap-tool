/* Generated By:JJTree&JavaCC: Do not edit this line. OlapQlParser.java */
package br.com.bi.model.query.grammar;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class OlapQlParser/*@bgen(jjtree)*/implements OlapQlParserTreeConstants, OlapQlParserConstants {/*@bgen(jjtree)*/
  protected static JJTOlapQlParserState jjtree = new JJTOlapQlParserState();public static void main(String args[]) {
        InputStream in = new ByteArrayInputStream(("select [teste];([teste], [teste])"
                + " on columns, [teste] on rows "
                + "from [teste] "
                + "where [teste] = 1 or [teste] and not [teste] > (1 + 2 * 5)").getBytes());

        OlapQlParser parser = new OlapQlParser(in);
        try {
            SimpleNode node = parser.query();
            node.dump(" ");
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
  }

/* ==================== */
/* = Production rules = */
/* ==================== */
  static final public SimpleNode query() throws ParseException {
 /*@bgen(jjtree) Query */
  SimpleNode jjtn000 = new SimpleNode(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SELECT);
      columns();
      jj_consume_token(ON);
      jj_consume_token(COLUMNS);
      jj_consume_token(COMMA);
      rows();
      jj_consume_token(ON);
      jj_consume_token(ROWS);
      jj_consume_token(FROM);
      cube();
      jj_consume_token(WHERE);
      filterExpression();
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void columns() throws ParseException {
                               /*@bgen(jjtree) Columns */
  SimpleNode jjtn000 = new SimpleNode(JJTCOLUMNS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      nodeExp();
    } catch (Throwable jjte000) {
                                     if (jjtc000) {
                                       jjtree.clearNodeScope(jjtn000);
                                       jjtc000 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte000 instanceof RuntimeException) {
                                       {if (true) throw (RuntimeException)jjte000;}
                                     }
                                     if (jjte000 instanceof ParseException) {
                                       {if (true) throw (ParseException)jjte000;}
                                     }
                                     {if (true) throw (Error)jjte000;}
    } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
    }
  }

  static final public void rows() throws ParseException {
                               /*@bgen(jjtree) Rows */
  SimpleNode jjtn000 = new SimpleNode(JJTROWS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      nodeExp();
    } catch (Throwable jjte000) {
                                     if (jjtc000) {
                                       jjtree.clearNodeScope(jjtn000);
                                       jjtc000 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte000 instanceof RuntimeException) {
                                       {if (true) throw (RuntimeException)jjte000;}
                                     }
                                     if (jjte000 instanceof ParseException) {
                                       {if (true) throw (ParseException)jjte000;}
                                     }
                                     {if (true) throw (Error)jjte000;}
    } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
    }
  }

  static final public void nodeExp() throws ParseException {
    node();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NODE_SEPARATOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(NODE_SEPARATOR);
      node();
    }
  }

  static final public void node() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METADATA_OBJECT_NAME:
                                     SimpleNode jjtn001 = new SimpleNode(JJTMETADATAOBJECT);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(METADATA_OBJECT_NAME);
      } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001, true);
                                     }
      }
      break;
    case LPAR:
                                                                                SimpleNode jjtn002 = new SimpleNode(JJTCROSSJOIN);
                                                                                boolean jjtc002 = true;
                                                                                jjtree.openNodeScope(jjtn002);
      try {
        crossJoin();
      } catch (Throwable jjte002) {
                                                                                if (jjtc002) {
                                                                                  jjtree.clearNodeScope(jjtn002);
                                                                                  jjtc002 = false;
                                                                                } else {
                                                                                  jjtree.popNode();
                                                                                }
                                                                                if (jjte002 instanceof RuntimeException) {
                                                                                  {if (true) throw (RuntimeException)jjte002;}
                                                                                }
                                                                                if (jjte002 instanceof ParseException) {
                                                                                  {if (true) throw (ParseException)jjte002;}
                                                                                }
                                                                                {if (true) throw (Error)jjte002;}
      } finally {
                                                                                if (jjtc002) {
                                                                                  jjtree.closeNodeScope(jjtn002, true);
                                                                                }
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

                                                                                                       // [filter], [level], [measure] or a crossjoin
  static final public void crossJoin() throws ParseException {
    jj_consume_token(LPAR);
                                            SimpleNode jjtn001 = new SimpleNode(JJTCROSSJOINFIRSTPARAM);
                                            boolean jjtc001 = true;
                                            jjtree.openNodeScope(jjtn001);
    try {
      nodeExp();
    } catch (Throwable jjte001) {
                                            if (jjtc001) {
                                              jjtree.clearNodeScope(jjtn001);
                                              jjtc001 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte001 instanceof RuntimeException) {
                                              {if (true) throw (RuntimeException)jjte001;}
                                            }
                                            if (jjte001 instanceof ParseException) {
                                              {if (true) throw (ParseException)jjte001;}
                                            }
                                            {if (true) throw (Error)jjte001;}
    } finally {
                                            if (jjtc001) {
                                              jjtree.closeNodeScope(jjtn001, true);
                                            }
    }
    jj_consume_token(COMMA);
                                                                                   SimpleNode jjtn002 = new SimpleNode(JJTCROSSJOINSECONDPARAM);
                                                                                   boolean jjtc002 = true;
                                                                                   jjtree.openNodeScope(jjtn002);
    try {
      nodeExp();
    } catch (Throwable jjte002) {
                                                                                   if (jjtc002) {
                                                                                     jjtree.clearNodeScope(jjtn002);
                                                                                     jjtc002 = false;
                                                                                   } else {
                                                                                     jjtree.popNode();
                                                                                   }
                                                                                   if (jjte002 instanceof RuntimeException) {
                                                                                     {if (true) throw (RuntimeException)jjte002;}
                                                                                   }
                                                                                   if (jjte002 instanceof ParseException) {
                                                                                     {if (true) throw (ParseException)jjte002;}
                                                                                   }
                                                                                   {if (true) throw (Error)jjte002;}
    } finally {
                                                                                   if (jjtc002) {
                                                                                     jjtree.closeNodeScope(jjtn002, true);
                                                                                   }
    }
    jj_consume_token(RPAR);
  }

  static final public void cube() throws ParseException {
                               /*@bgen(jjtree) Cube */
  SimpleNode jjtn000 = new SimpleNode(JJTCUBE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(METADATA_OBJECT_NAME);
    } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
    }
  }

/* ===================== */
/* = filter expression = */
/* ===================== */
  static final public void filterExpression() throws ParseException {
                                   /*@bgen(jjtree) Filter */
  SimpleNode jjtn000 = new SimpleNode(JJTFILTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      disjunction();
    } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte000;}
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte000;}
                                         }
                                         {if (true) throw (Error)jjte000;}
    } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
    }
  }

  static final public void disjunction() throws ParseException {
    conjunction();
                                                       SimpleNode jjtn001 = new SimpleNode(JJTDISJUNCTION);
                                                       boolean jjtc001 = true;
                                                       jjtree.openNodeScope(jjtn001);
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(OR);
        conjunction();
      }
    } catch (Throwable jjte001) {
                                                       if (jjtc001) {
                                                         jjtree.clearNodeScope(jjtn001);
                                                         jjtc001 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte001 instanceof RuntimeException) {
                                                         {if (true) throw (RuntimeException)jjte001;}
                                                       }
                                                       if (jjte001 instanceof ParseException) {
                                                         {if (true) throw (ParseException)jjte001;}
                                                       }
                                                       {if (true) throw (Error)jjte001;}
    } finally {
                                                       if (jjtc001) {
                                                         jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                                       }
    }
  }

  static final public void conjunction() throws ParseException {
    term();
                                                SimpleNode jjtn001 = new SimpleNode(JJTCONJUNCTION);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(AND);
        term();
      }
    } catch (Throwable jjte001) {
                                                if (jjtc001) {
                                                  jjtree.clearNodeScope(jjtn001);
                                                  jjtc001 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte001 instanceof RuntimeException) {
                                                  {if (true) throw (RuntimeException)jjte001;}
                                                }
                                                if (jjte001 instanceof ParseException) {
                                                  {if (true) throw (ParseException)jjte001;}
                                                }
                                                {if (true) throw (Error)jjte001;}
    } finally {
                                                if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                                }
    }
  }

  static final public void term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case METADATA_OBJECT_NAME:
      atom();
      break;
    case NOT:
      negation();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void atom() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METADATA_OBJECT_NAME:
      comparison();
      break;
    case LPAR:
      jj_consume_token(LPAR);
      filterExpression();
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void negation() throws ParseException {
                                   /*@bgen(jjtree) Negation */
  SimpleNode jjtn000 = new SimpleNode(JJTNEGATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOT);
      term();
    } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte000;}
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte000;}
                                         }
                                         {if (true) throw (Error)jjte000;}
    } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
    }
  }

  static final public void comparison() throws ParseException {
    jj_consume_token(METADATA_OBJECT_NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(METADATA_OBJECT_NAME);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RELATIONAL_OPERATOR:
      jj_consume_token(RELATIONAL_OPERATOR);
      operating();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

                                                                                                                                       // [measure] > 1 or [level].[property] = "foo"
  static final public void operating() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATE:
      jj_consume_token(DATE);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    case MINUS:
    case LPAR:
    case METADATA_OBJECT_NAME:
    case FLOATING_POINT_LITERAL:
    case INTEGER_LITERAL:
      arithmeticExpression();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* ========================= */
/* = arithmetic expression = */
/* ========================= */
  static final public void arithmeticExpression() throws ParseException {
    additiveExpression();
  }

  static final public void additiveExpression() throws ParseException {
    multiplicativeExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      multiplicativeExpression();
    }
  }

  static final public void multiplicativeExpression() throws ParseException {
    unaryExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        jj_consume_token(MULT);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      unaryExpression();
    }
  }

  static final public void unaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
      arithmeticExpression();
      jj_consume_token(RPAR);
      break;
    case METADATA_OBJECT_NAME:
      jj_consume_token(METADATA_OBJECT_NAME);
      break;
    case MINUS:
    case FLOATING_POINT_LITERAL:
    case INTEGER_LITERAL:
      number();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void number() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public OlapQlParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100000,0x10008000,0x200,0x100,0x10008080,0x10008000,0x400,0x40,0xb0209000,0x1800,0x1800,0x6000,0x6000,0xb0009000,0x1000,0xa0000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public OlapQlParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public OlapQlParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new OlapQlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public OlapQlParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new OlapQlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public OlapQlParser(OlapQlParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(OlapQlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
