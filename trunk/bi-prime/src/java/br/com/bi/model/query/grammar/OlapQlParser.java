/* Generated By:JavaCC: Do not edit this line. OlapQlParser.java */
package br.com.bi.model.query.grammar;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class OlapQlParser implements OlapQlParserConstants {
  public static void main(String args[]) {
        InputStream in = new ByteArrayInputStream(("select [teste];[teste];([teste], [teste])"
                + " on columns, [teste] on rows "
                + "from [teste] "
                + "where ([teste] > 1 and ([teste] = 1 * ([yyyyy] + [uuuu]) or [yyyy]))").getBytes());

        OlapQlParser parser = new OlapQlParser(in);
        try {
            parser.query();
            System.out.print("express\u00e3o v\u00e1lida");
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
  }

/* ================================== */
/* =       Regras de produção       = */
/* ================================== */
  static final public void query() throws ParseException {
    jj_consume_token(SELECT);
    yAxis();
    jj_consume_token(ON);
    jj_consume_token(COLUMNS);
    jj_consume_token(COMMA);
    xAxis();
    jj_consume_token(ON);
    jj_consume_token(ROWS);
    jj_consume_token(FROM);
    cube();
    jj_consume_token(WHERE);
    queryFilter();
    jj_consume_token(0);
  }

  static final public void yAxis() throws ParseException {
    nodeExp();
  }

  static final public void xAxis() throws ParseException {
    nodeExp();
  }

  static final public void nodeExp() throws ParseException {
    leftNode();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NODE_SEPARATOR:
      rightNode();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  static final public void rightNode() throws ParseException {
    jj_consume_token(NODE_SEPARATOR);
    nodeExp();
  }

  static final public void leftNode() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METADATA_OBJECT_NAME:
      cubeMetadataNode();
      break;
    case LPAR:
      crossJoin();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Um metadado pode ser um nível (quando ocorrer <METADATA_OBJECT_NAME> <DOT> <METADATA_OBJECT_NAME>), um filtro, ou uma métrica (quando apenas <METADATA_OBJECT_NAME>). */
  static final public void cubeMetadataNode() throws ParseException {
    jj_consume_token(METADATA_OBJECT_NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(METADATA_OBJECT_NAME);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void crossJoin() throws ParseException {
    jj_consume_token(LPAR);
    nodeExp();
    jj_consume_token(COMMA);
    nodeExp();
    jj_consume_token(RPAR);
  }

  static final public void cube() throws ParseException {
    jj_consume_token(METADATA_OBJECT_NAME);
  }

  static final public void queryFilter() throws ParseException {
    queryLeftExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case AND:
    case OR:
      queryRightExp();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  static final public void queryRightExp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      disjunction();
      break;
    case AND:
      conjunction();
      break;
    case NOT:
      negation();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void disjunction() throws ParseException {
    jj_consume_token(OR);
    queryFilter();
  }

  static final public void conjunction() throws ParseException {
    jj_consume_token(AND);
    queryFilter();
  }

  static final public void negation() throws ParseException {
    jj_consume_token(NOT);
    queryFilter();
  }

  static final public void queryLeftExp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METADATA_OBJECT_NAME:
      comparison();
      break;
    case LPAR:
      jj_consume_token(LPAR);
      queryFilter();
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* O segundo caso desta regra de produção ocorre um metadado e eventualmente um operador relacional e um operando.
 * Se ocorrer apenas um metadado, então este deve ser um filtro, senão é uma métrica seguida de um operador e um operando. */
  static final public void comparison() throws ParseException {
    jj_consume_token(METADATA_OBJECT_NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(METADATA_OBJECT_NAME);
      jj_consume_token(DOT);
      jj_consume_token(METADATA_OBJECT_NAME);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RELATIONAL_OPERATOR:
      jj_consume_token(RELATIONAL_OPERATOR);
      operating();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void operating() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATE:
      jj_consume_token(DATE);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    case MINUS:
    case LPAR:
    case METADATA_OBJECT_NAME:
    case FLOATING_POINT_LITERAL:
    case INTEGER_LITERAL:
      arithExp();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void number() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void arithExp() throws ParseException {
    arithLeftExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      arithRightExp();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void arithRightExp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    arithExp();
  }

  static final public void arithLeftExp() throws ParseException {
    factor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
    case DIV:
      arithMultExp();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  static final public void arithMultExp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
      jj_consume_token(MULT);
      break;
    case DIV:
      jj_consume_token(DIV);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    arithLeftExp();
  }

/* O metadado nesta produção só pode ser uma métrica. */
  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case FLOATING_POINT_LITERAL:
    case INTEGER_LITERAL:
      number();
      break;
    case METADATA_OBJECT_NAME:
      jj_consume_token(METADATA_OBJECT_NAME);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      arithExp();
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public OlapQlParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100000,0x10008000,0x400,0x380,0x380,0x10008000,0x400,0x40,0xb0209000,0x1000,0xa0000000,0x1800,0x1800,0x6000,0x6000,0xb0009000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public OlapQlParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public OlapQlParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new OlapQlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public OlapQlParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new OlapQlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public OlapQlParser(OlapQlParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(OlapQlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
