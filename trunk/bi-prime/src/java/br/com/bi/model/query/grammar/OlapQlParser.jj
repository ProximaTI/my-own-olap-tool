/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. OlapQlParser.jj */
/*@egen*/PARSER_BEGIN(OlapQlParser)
package br.com.bi.model.query.grammar;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class OlapQlParser/*@bgen(jjtree)*/implements OlapQlParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTOlapQlParserState jjtree = new JJTOlapQlParserState();

/*@egen*/
  public static void main(String args[]) {
        InputStream in = new ByteArrayInputStream(("select [teste];([teste], [teste])"
                + " on columns, [teste] on rows "
                + "from [teste] "
                + "where not [teste] > (1 + 2 * 5)").getBytes());

        OlapQlParser parser = new OlapQlParser(in);
        try {
            SimpleNode node = parser.query();
            node.dump(" ");
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
  }
}
PARSER_END(OlapQlParser)

SKIP : { " " | "\t" | "\n" | "\r" | "\f" }

TOKEN [IGNORE_CASE] :
{
  < RELATIONAL_OPERATOR: ">" | "<" | ">=" | "<=" | "=" >
| < NOT: "not" >
| < AND: "and" >
| < OR: "or" >
| < DOT: "." >
| < PLUS: "+" >
| < MINUS: "-" >
| < MULT: "*" >
| < DIV: "/" >
| < LPAR: "(" >
| < RPAR: ")" >
| < LBRA: "[" >
| < RBRA: "]" >
| < COMMA: "," >
| < NODE_SEPARATOR: ";" >
| < DATE: ((["0"-"9"])+ "/" (["0"-"9"])+ "/" (["0"-"9"])+) >
| < SELECT: "select" >
| < ON: "on" >
| < ROWS: "rows" >
| < COLUMNS: "columns" >
| < FROM: "from" >
| < WHERE: "where" >
| < METADATA_OBJECT_NAME: <LBRA> (~["[","]"])+ <RBRA> >
| < FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? 
                             | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? 
                             | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
                             | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"] >
| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < INTEGER_LITERAL : ["0"-"9"] (["0"-"9"])* >
| < STRING_LITERAL: "\"" (<CHAR>)* "\"" > 
| < #CHAR: (~["\""] | "\\" (["n","r","\\","\'","\""])) >
}

/* ====================== */
/* = Regras de produ\u00e7\u00e3o = */
/* ====================== */

SimpleNode query() : 
{/*@bgen(jjtree) query */
  SimpleNode jjtn000 = new SimpleNode(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) query */
    try {
/*@egen*/
    <SELECT> yAxis() <ON> <COLUMNS> <COMMA> xAxis() <ON> <ROWS> <FROM> cube() <WHERE> filterExpression() <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void yAxis()      : {/*@bgen(jjtree) yAxis */
  SimpleNode jjtn000 = new SimpleNode(JJTYAXIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) yAxis */
                         try {
/*@egen*/ nodeExp()/*@bgen(jjtree)*/
                         } catch (Throwable jjte000) {
                           if (jjtc000) {
                             jjtree.clearNodeScope(jjtn000);
                             jjtc000 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte000 instanceof RuntimeException) {
                             throw (RuntimeException)jjte000;
                           }
                           if (jjte000 instanceof ParseException) {
                             throw (ParseException)jjte000;
                           }
                           throw (Error)jjte000;
                         } finally {
                           if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
                         }
/*@egen*/ }

void xAxis()      : {/*@bgen(jjtree) xAxis */
  SimpleNode jjtn000 = new SimpleNode(JJTXAXIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) xAxis */
                         try {
/*@egen*/ nodeExp()/*@bgen(jjtree)*/
                         } catch (Throwable jjte000) {
                           if (jjtc000) {
                             jjtree.clearNodeScope(jjtn000);
                             jjtc000 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte000 instanceof RuntimeException) {
                             throw (RuntimeException)jjte000;
                           }
                           if (jjte000 instanceof ParseException) {
                             throw (ParseException)jjte000;
                           }
                           throw (Error)jjte000;
                         } finally {
                           if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
                         }
/*@egen*/ }

void nodeExp()    : {/*@bgen(jjtree) nodeExp */
  SimpleNode jjtn000 = new SimpleNode(JJTNODEEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) nodeExp */
                         try {
/*@egen*/ node() ( <NODE_SEPARATOR> node() )*/*@bgen(jjtree)*/
                         } catch (Throwable jjte000) {
                           if (jjtc000) {
                             jjtree.clearNodeScope(jjtn000);
                             jjtc000 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte000 instanceof RuntimeException) {
                             throw (RuntimeException)jjte000;
                           }
                           if (jjte000 instanceof ParseException) {
                             throw (ParseException)jjte000;
                           }
                           throw (Error)jjte000;
                         } finally {
                           if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
                         }
/*@egen*/ }

void node()       : {/*@bgen(jjtree) node */
  SimpleNode jjtn000 = new SimpleNode(JJTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) node */
                         try {
/*@egen*/ cubeMetadataNode() | crossJoin()/*@bgen(jjtree)*/
                         } catch (Throwable jjte000) {
                           if (jjtc000) {
                             jjtree.clearNodeScope(jjtn000);
                             jjtc000 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte000 instanceof RuntimeException) {
                             throw (RuntimeException)jjte000;
                           }
                           if (jjte000 instanceof ParseException) {
                             throw (ParseException)jjte000;
                           }
                           throw (Error)jjte000;
                         } finally {
                           if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
                         }
/*@egen*/ }

// Um metadado pode ser um n\u00edvel (quando ocorrer <METADATA_OBJECT_NAME> <DOT> <METADATA_OBJECT_NAME>), 
// um filtro, ou uma m\u00e9trica (quando apenas <METADATA_OBJECT_NAME>). 
void cubeMetadataNode() : {/*@bgen(jjtree) cubeMetadataNode */
  SimpleNode jjtn000 = new SimpleNode(JJTCUBEMETADATANODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) cubeMetadataNode */
                               try {
/*@egen*/ <METADATA_OBJECT_NAME> [ <DOT> <METADATA_OBJECT_NAME> ]/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
                               }
/*@egen*/ }

void crossJoin()        : {/*@bgen(jjtree) crossJoin */
  SimpleNode jjtn000 = new SimpleNode(JJTCROSSJOIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) crossJoin */
                               try {
/*@egen*/ <LPAR> nodeExp() <COMMA> nodeExp() <RPAR>/*@bgen(jjtree)*/
                               } catch (Throwable jjte000) {
                                 if (jjtc000) {
                                   jjtree.clearNodeScope(jjtn000);
                                   jjtc000 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte000 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte000;
                                 }
                                 if (jjte000 instanceof ParseException) {
                                   throw (ParseException)jjte000;
                                 }
                                 throw (Error)jjte000;
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
                               }
/*@egen*/ }

void cube()             : {/*@bgen(jjtree) cube */
  SimpleNode jjtn000 = new SimpleNode(JJTCUBE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) cube */
                               try {
/*@egen*/ <METADATA_OBJECT_NAME>/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
                               }
/*@egen*/ }

/* ===================== */
/* = filter expression = */
/* ===================== */

void filterExpression() : {/*@bgen(jjtree) filterExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTFILTEREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) filterExpression */
                               try {
/*@egen*/ disjunction()/*@bgen(jjtree)*/
                               } catch (Throwable jjte000) {
                                 if (jjtc000) {
                                   jjtree.clearNodeScope(jjtn000);
                                   jjtc000 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte000 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte000;
                                 }
                                 if (jjte000 instanceof ParseException) {
                                   throw (ParseException)jjte000;
                                 }
                                 throw (Error)jjte000;
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
                               }
/*@egen*/ }

void disjunction()      : {/*@bgen(jjtree) disjunction */
  SimpleNode jjtn000 = new SimpleNode(JJTDISJUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) disjunction */
                               try {
/*@egen*/ conjunction() ( <OR> conjunction() )*/*@bgen(jjtree)*/
                               } catch (Throwable jjte000) {
                                 if (jjtc000) {
                                   jjtree.clearNodeScope(jjtn000);
                                   jjtc000 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte000 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte000;
                                 }
                                 if (jjte000 instanceof ParseException) {
                                   throw (ParseException)jjte000;
                                 }
                                 throw (Error)jjte000;
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
                               }
/*@egen*/ }

void conjunction()      : {/*@bgen(jjtree) conjunction */
  SimpleNode jjtn000 = new SimpleNode(JJTCONJUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) conjunction */
                               try {
/*@egen*/ term() ( <AND> term() )*/*@bgen(jjtree)*/
                               } catch (Throwable jjte000) {
                                 if (jjtc000) {
                                   jjtree.clearNodeScope(jjtn000);
                                   jjtc000 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte000 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte000;
                                 }
                                 if (jjte000 instanceof ParseException) {
                                   throw (ParseException)jjte000;
                                 }
                                 throw (Error)jjte000;
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
                               }
/*@egen*/ }

void term()             : {/*@bgen(jjtree) term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) term */
                               try {
/*@egen*/ atom()| negation()/*@bgen(jjtree)*/
                               } catch (Throwable jjte000) {
                                 if (jjtc000) {
                                   jjtree.clearNodeScope(jjtn000);
                                   jjtc000 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte000 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte000;
                                 }
                                 if (jjte000 instanceof ParseException) {
                                   throw (ParseException)jjte000;
                                 }
                                 throw (Error)jjte000;
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
                               }
/*@egen*/ }

void atom()             : {/*@bgen(jjtree) atom */
  SimpleNode jjtn000 = new SimpleNode(JJTATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) atom */
                               try {
/*@egen*/ comparison() | <LPAR> filterExpression() <RPAR>/*@bgen(jjtree)*/
                               } catch (Throwable jjte000) {
                                 if (jjtc000) {
                                   jjtree.clearNodeScope(jjtn000);
                                   jjtc000 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte000 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte000;
                                 }
                                 if (jjte000 instanceof ParseException) {
                                   throw (ParseException)jjte000;
                                 }
                                 throw (Error)jjte000;
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
                               }
/*@egen*/ }

void negation()         : {/*@bgen(jjtree) negation */
  SimpleNode jjtn000 = new SimpleNode(JJTNEGATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) negation */
                               try {
/*@egen*/ <NOT> term()/*@bgen(jjtree)*/
                               } catch (Throwable jjte000) {
                                 if (jjtc000) {
                                   jjtree.clearNodeScope(jjtn000);
                                   jjtc000 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte000 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte000;
                                 }
                                 if (jjte000 instanceof ParseException) {
                                   throw (ParseException)jjte000;
                                 }
                                 throw (Error)jjte000;
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
                               }
/*@egen*/ }

// O segundo caso desta regra de produ\u00e7\u00e3o ocorre um metadado e eventualmente um operador relacional e um operando.
// Se ocorrer apenas um metadado, ent\u00e3o este deve ser um filtro, sen\u00e3o \u00e9 uma m\u00e9trica seguida de um operador e um operando.
void comparison()               : {/*@bgen(jjtree) comparison */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) comparison */
                                       try {
/*@egen*/ <METADATA_OBJECT_NAME> [ <DOT> <METADATA_OBJECT_NAME> <DOT> <METADATA_OBJECT_NAME> ] [ <RELATIONAL_OPERATOR> operating() ]/*@bgen(jjtree)*/
                                       } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte000;
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           throw (ParseException)jjte000;
                                         }
                                         throw (Error)jjte000;
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
                                       }
/*@egen*/ } 

void operating()                : {/*@bgen(jjtree) operating */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) operating */
                                       try {
/*@egen*/ <DATE> | <STRING_LITERAL> | arithmeticExpression()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte000;
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           throw (ParseException)jjte000;
                                         }
                                         throw (Error)jjte000;
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
                                       }
/*@egen*/ }

void arithmeticExpression()     : {/*@bgen(jjtree) arithmeticExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTARITHMETICEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) arithmeticExpression */
                                       try {
/*@egen*/ additiveExpression()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte000;
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           throw (ParseException)jjte000;
                                         }
                                         throw (Error)jjte000;
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
                                       }
/*@egen*/ }

void additiveExpression()       : {/*@bgen(jjtree) additiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) additiveExpression */
                                       try {
/*@egen*/ multiplicativeExpression() ( ( <PLUS> | <MINUS> ) multiplicativeExpression() )*/*@bgen(jjtree)*/
                                       } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte000;
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           throw (ParseException)jjte000;
                                         }
                                         throw (Error)jjte000;
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
                                       }
/*@egen*/ }

void multiplicativeExpression() : {/*@bgen(jjtree) multiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) multiplicativeExpression */
                                       try {
/*@egen*/ unaryExpression() ( ( <MULT> | <DIV> ) unaryExpression() )*/*@bgen(jjtree)*/
                                       } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte000;
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           throw (ParseException)jjte000;
                                         }
                                         throw (Error)jjte000;
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
                                       }
/*@egen*/ }

void unaryExpression()          : {/*@bgen(jjtree) unaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) unaryExpression */
                                       try {
/*@egen*/ <LPAR> arithmeticExpression() <RPAR> | <METADATA_OBJECT_NAME> | number()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte000;
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           throw (ParseException)jjte000;
                                         }
                                         throw (Error)jjte000;
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
                                       }
/*@egen*/ }

void number()                   : {/*@bgen(jjtree) number */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) number */
                                       try {
/*@egen*/ [ <MINUS> ] ( <INTEGER_LITERAL> | <FLOATING_POINT_LITERAL> )/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
                                       }
/*@egen*/  }
