
import java.io.ByteArrayInputStream;
import java.io.InputStream;

/* Generated By:JavaCC: Do not edit this line. FilterParser.java */
public class FilterParser implements FilterParserConstants {

    public static void main(String args[]) {
        InputStream in = new ByteArrayInputStream(("select ([teste],[nada]);;([teste], [teste])"
                + " on columns, [teste] on rows "
                + "from [teste] "
                + "where [teste] > 1 and ([teste] or [teste])").getBytes());

        FilterParser parser = new FilterParser(in);
        try {
            parser.query();
            System.out.println("express\u00e3o v\u00e1lida");
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
    }

    /* Produções da linguagem de consulta */
    static final public void query() throws ParseException {
        jj_consume_token(SELECT);
        yAxis();
        jj_consume_token(ON);
        jj_consume_token(COLUMNS);
        jj_consume_token(COMMA);
        xAxis();
        jj_consume_token(ON);
        jj_consume_token(ROWS);
        jj_consume_token(FROM);
        cube();
        jj_consume_token(WHERE);
        queryFilter();
        jj_consume_token(0);
    }

    static final public void yAxis() throws ParseException {
        nodeExpression();
    }

    static final public void xAxis() throws ParseException {
        nodeExpression();
    }

    static final public void nodeExpression() throws ParseException {
        leftNode();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case NODE_SEPARATOR:
                rightNode();
                break;
            default:
                jj_la1[0] = jj_gen;
                ;
        }
    }

    static final public void rightNode() throws ParseException {
        jj_consume_token(NODE_SEPARATOR);
        nodeExpression();
    }

    static final public void leftNode() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case METADATA_OBJECT_NAME:
                cubeMetadataNode();
                break;
            case LPAR:
                crossJoin();
                break;
            default:
                jj_la1[1] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    /*
     * Um metadado pode ser um nível 
     * (quando ocorrer <METADATA_OBJECT_NAME> <DOT> <METADATA_OBJECT_NAME>),
     * um filtro, ou uma métrica (quando apenas <METADATA_OBJECT_NAME>).
     */
    static final public void cubeMetadataNode() throws ParseException {
        jj_consume_token(METADATA_OBJECT_NAME);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case DOT:
                jj_consume_token(DOT);
                jj_consume_token(METADATA_OBJECT_NAME);
                break;
            default:
                jj_la1[2] = jj_gen;
                ;
        }
    }

    static final public void crossJoin() throws ParseException {
        jj_consume_token(LPAR);
        nodeExpression();
        jj_consume_token(COMMA);
        nodeExpression();
        jj_consume_token(RPAR);
    }

    static final public void cube() throws ParseException {
        jj_consume_token(METADATA_OBJECT_NAME);
    }

    static final public void queryFilter() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case METADATA_OBJECT_NAME:
                leftExpression();
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case NOT:
                    case AND:
                    case OR:
                        rightExpression();
                        break;
                    default:
                        jj_la1[3] = jj_gen;
                        ;
                }
                break;
            case LPAR:
                jj_consume_token(LPAR);
                queryFilter();
                jj_consume_token(RPAR);
                break;
            default:
                jj_la1[4] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static final public void rightExpression() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case OR:
                disjunction();
                break;
            case AND:
                conjunction();
                break;
            case NOT:
                negation();
                break;
            default:
                jj_la1[5] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static final public void disjunction() throws ParseException {
        jj_consume_token(OR);
        queryFilter();
    }

    static final public void conjunction() throws ParseException {
        jj_consume_token(AND);
        queryFilter();
    }

    static final public void negation() throws ParseException {
        jj_consume_token(NOT);
        queryFilter();
    }

    static final public void leftExpression() throws ParseException {
        comparison();
    }

    /* 
     * O segundo caso desta regra de produção ocorre um metadado
     * e eventualmente um operador relacional e um operando.
     * Se ocorrer apenas um metadado, então este deve ser um filtro,
     * senão é uma métrica seguida de um operador e um operando. 
     */
    static final public void comparison() throws ParseException {
        jj_consume_token(METADATA_OBJECT_NAME);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case DOT:
                jj_consume_token(DOT);
                jj_consume_token(METADATA_OBJECT_NAME);
                jj_consume_token(DOT);
                jj_consume_token(METADATA_OBJECT_NAME);
                break;
            default:
                jj_la1[6] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case RELATIONAL_OPERATOR:
                jj_consume_token(RELATIONAL_OPERATOR);
                operating();
                break;
            default:
                jj_la1[7] = jj_gen;
                ;
        }
    }

    static final public void operating() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case DATE:
                jj_consume_token(DATE);
                break;
            case STRING_LITERAL:
                jj_consume_token(STRING_LITERAL);
                break;
            case FLOATING_POINT_LITERAL:
            case INTEGER_LITERAL:
                number();
                break;
            case METADATA_OBJECT_NAME:
                arithmeticExpression();
                break;
            default:
                jj_la1[8] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static final public void number() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case INTEGER_LITERAL:
                jj_consume_token(INTEGER_LITERAL);
                break;
            case FLOATING_POINT_LITERAL:
                jj_consume_token(FLOATING_POINT_LITERAL);
                break;
            default:
                jj_la1[9] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    /* TODO implementar esta produção */
    static final public void arithmeticExpression() throws ParseException {
        jj_consume_token(METADATA_OBJECT_NAME);
    }
    static private boolean jj_initialized_once = false;
    /** Generated Token Manager. */
    static public FilterParserTokenManager token_source;
    static SimpleCharStream jj_input_stream;
    /** Current token. */
    static public Token token;
    /** Next token. */
    static public Token jj_nt;
    static private int jj_ntk;
    static private int jj_gen;
    static final private int[] jj_la1 = new int[10];
    static private int[] jj_la1_0;

    static {
        jj_la1_init_0();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x10000, 0x1000800, 0x400, 0x380, 0x1000800, 0x380, 0x400, 0x40, 0x1b020000, 0xa000000,};
    }

    /** Constructor with InputStream. */
    public FilterParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /** Constructor with InputStream and supplied encoding */
    public FilterParser(java.io.InputStream stream, String encoding) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser.  ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new FilterParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 10; i++) {
            jj_la1[i] = -1;
        }
    }

    /** Reinitialise. */
    static public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /** Reinitialise. */
    static public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 10; i++) {
            jj_la1[i] = -1;
        }
    }

    /** Constructor. */
    public FilterParser(java.io.Reader stream) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new FilterParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 10; i++) {
            jj_la1[i] = -1;
        }
    }

    /** Reinitialise. */
    static public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 10; i++) {
            jj_la1[i] = -1;
        }
    }

    /** Constructor with generated Token Manager. */
    public FilterParser(FilterParserTokenManager tm) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 10; i++) {
            jj_la1[i] = -1;
        }
    }

    /** Reinitialise. */
    public void ReInit(FilterParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 10; i++) {
            jj_la1[i] = -1;
        }
    }

    static private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    /** Get the next Token. */
    static final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    static final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    static private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }
    static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    static private int[] jj_expentry;
    static private int jj_kind = -1;

    /** Generate ParseException. */
    static public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[30];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 10; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 30; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    static final public void enable_tracing() {
    }

    /** Disable tracing. */
    static final public void disable_tracing() {
    }
}
