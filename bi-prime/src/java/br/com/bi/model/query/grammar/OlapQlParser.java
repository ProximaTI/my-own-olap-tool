/* Generated By:JJTree&JavaCC: Do not edit this line. OlapQlParser.java */
package br.com.bi.model.query.grammar;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class OlapQlParser/*@bgen(jjtree)*/implements OlapQlParserTreeConstants, OlapQlParserConstants {/*@bgen(jjtree)*/
  protected JJTOlapQlParserState jjtree = new JJTOlapQlParserState();
    private boolean rows = false;
    private boolean columns = false;

    public static void main(String args[]) {
        InputStream in = new ByteArrayInputStream(
              ("selecione {[teste], ([teste], [teste])}"
                + " nas colunas, [teste] nas linhas "
                + "do cubo [teste] "
                + "onde [teste] = 1 ou [teste] e n\u00e3o [teste] > (1 / 1 + 2 * [teste])").getBytes());

        OlapQlParser parser = new OlapQlParser(in);

        try {
            SimpleNode node = parser.query();
            node.dump("   ");
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
    }

    public static SimpleNode jjtCreate(int id) {
        return new OlapQlNode(id);
    }

    static class OlapQlNode extends SimpleNode {

        OlapQlNode(int i) {
            super(i);
        }

        @Override
        public String toString() {
            if (value != null)
                return OlapQlParserTreeConstants.jjtNodeName[id] + "-" + value;
            else
                return OlapQlParserTreeConstants.jjtNodeName[id];
        }
    }

  final public SimpleNode query() throws ParseException {
 /*@bgen(jjtree) Query */
  SimpleNode jjtn000 = (SimpleNode)OlapQlParser.jjtCreate(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SELECT);
      axisSpecification();
      jj_consume_token(31);
      axisSpecification();
      jj_consume_token(FROM);
      jj_consume_token(CUBE);
      cube();
      jj_consume_token(WHERE);
      filterExpression();
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void axisSpecification() throws ParseException {
 /*@bgen(jjtree) Axis */
    SimpleNode jjtn000 = (SimpleNode)OlapQlParser.jjtCreate(JJTAXIS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String axis;
    try {
      set();
      jj_consume_token(ON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROWS:
        axis = rows();
        break;
      case COLUMNS:
        axis = columns();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.value = axis;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public String rows() throws ParseException {
        if (rows)
            {if (true) throw new ParseException("O eixo das linhas foi duplicado");}
        else
            rows = true;
    jj_consume_token(ROWS);
        {if (true) return "ROWS";}
    throw new Error("Missing return statement in function");
  }

  final public String columns() throws ParseException {
        if (columns)
            {if (true) throw new ParseException("O eixo das colunas foi duplicado");}
        else
            columns = true;
    jj_consume_token(COLUMNS);
        {if (true) return "COLUMNS";}
    throw new Error("Missing return statement in function");
  }

  final public void set() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METADATA_OBJECT_NAME:
    case 34:
      node();
      break;
    case 32:
      jj_consume_token(32);
      node();
      label_1:
      while (true) {
        jj_consume_token(31);
        node();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(33);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void node() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METADATA_OBJECT_NAME:
      SimpleNode jjtn001 = (SimpleNode)OlapQlParser.jjtCreate(JJTMETADATAOBJECT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(METADATA_OBJECT_NAME);
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      break;
    case 34:
                                               SimpleNode jjtn002 = (SimpleNode)OlapQlParser.jjtCreate(JJTCROSSJOIN);
                                               boolean jjtc002 = true;
                                               jjtree.openNodeScope(jjtn002);
      try {
        crossJoin();
      } catch (Throwable jjte002) {
                                               if (jjtc002) {
                                                 jjtree.clearNodeScope(jjtn002);
                                                 jjtc002 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte002 instanceof RuntimeException) {
                                                 {if (true) throw (RuntimeException)jjte002;}
                                               }
                                               if (jjte002 instanceof ParseException) {
                                                 {if (true) throw (ParseException)jjte002;}
                                               }
                                               {if (true) throw (Error)jjte002;}
      } finally {
                                               if (jjtc002) {
                                                 jjtree.closeNodeScope(jjtn002, true);
                                               }
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void crossJoin() throws ParseException {
    jj_consume_token(34);
          SimpleNode jjtn001 = (SimpleNode)OlapQlParser.jjtCreate(JJTFIRSTSET);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      set();
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
    }
    jj_consume_token(31);
                              SimpleNode jjtn002 = (SimpleNode)OlapQlParser.jjtCreate(JJTSECONDSET);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
    try {
      set();
    } catch (Throwable jjte002) {
                              if (jjtc002) {
                                jjtree.clearNodeScope(jjtn002);
                                jjtc002 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte002 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte002;}
                              }
                              if (jjte002 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte002;}
                              }
                              {if (true) throw (Error)jjte002;}
    } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                              }
    }
    jj_consume_token(35);
  }

  final public void cube() throws ParseException {
 /*@bgen(jjtree) Cube */
  SimpleNode jjtn000 = (SimpleNode)OlapQlParser.jjtCreate(JJTCUBE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(METADATA_OBJECT_NAME);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void filterExpression() throws ParseException {
 /*@bgen(jjtree) Filter */
  SimpleNode jjtn000 = (SimpleNode)OlapQlParser.jjtCreate(JJTFILTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      disjunction();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void disjunction() throws ParseException {
      SimpleNode jjtn001 = (SimpleNode)OlapQlParser.jjtCreate(JJTDISJUNCTION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      conjunction();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        jj_consume_token(OR);
        conjunction();
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void conjunction() throws ParseException {
      SimpleNode jjtn001 = (SimpleNode)OlapQlParser.jjtCreate(JJTCONJUNCTION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      term();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        jj_consume_token(AND);
        term();
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METADATA_OBJECT_NAME:
    case 34:
      atom();
      break;
    case NOT:
      negation();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void atom() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METADATA_OBJECT_NAME:
      comparison();
      break;
    case 34:
      jj_consume_token(34);
      filterExpression();
      jj_consume_token(35);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void negation() throws ParseException {
 /*@bgen(jjtree) Negation */
  SimpleNode jjtn000 = (SimpleNode)OlapQlParser.jjtCreate(JJTNEGATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOT);
      term();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void comparison() throws ParseException {
 /*@bgen(jjtree) Comparison */
  SimpleNode jjtn000 = (SimpleNode)OlapQlParser.jjtCreate(JJTCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SimpleNode jjtn001 = (SimpleNode)OlapQlParser.jjtCreate(JJTMETADATAOBJECT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(METADATA_OBJECT_NAME);
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(METADATA_OBJECT_NAME);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RELATIONAL_OPERATOR:
                                                                                    SimpleNode jjtn002 = (SimpleNode)OlapQlParser.jjtCreate(JJTRELATIONALOPERATOR);
                                                                                    boolean jjtc002 = true;
                                                                                    jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(RELATIONAL_OPERATOR);
        } finally {
                                                                                    if (jjtc002) {
                                                                                      jjtree.closeNodeScope(jjtn002, true);
                                                                                    }
        }
        operating();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void operating() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATE:
      SimpleNode jjtn001 = (SimpleNode)OlapQlParser.jjtCreate(JJTDATE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(DATE);
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      break;
    case STRING_LITERAL:
                     SimpleNode jjtn002 = (SimpleNode)OlapQlParser.jjtCreate(JJTSTRINGLITERAL);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(STRING_LITERAL);
      } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                     }
      }
      break;
    case MINUS:
    case METADATA_OBJECT_NAME:
    case FLOATING_POINT_LITERAL:
    case INTEGER_LITERAL:
    case 34:
                                                       SimpleNode jjtn003 = (SimpleNode)OlapQlParser.jjtCreate(JJTARITHMETICEXPRESSION);
                                                       boolean jjtc003 = true;
                                                       jjtree.openNodeScope(jjtn003);
      try {
        arithmeticExpression();
      } catch (Throwable jjte003) {
                                                       if (jjtc003) {
                                                         jjtree.clearNodeScope(jjtn003);
                                                         jjtc003 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte003 instanceof RuntimeException) {
                                                         {if (true) throw (RuntimeException)jjte003;}
                                                       }
                                                       if (jjte003 instanceof ParseException) {
                                                         {if (true) throw (ParseException)jjte003;}
                                                       }
                                                       {if (true) throw (Error)jjte003;}
      } finally {
                                                       if (jjtc003) {
                                                         jjtree.closeNodeScope(jjtn003, true);
                                                       }
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void arithmeticExpression() throws ParseException {
    additiveExpression();
  }

  final public void additiveExpression() throws ParseException {
      SimpleNode jjtn001 = (SimpleNode)OlapQlParser.jjtCreate(JJTADDITION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      multiplicativeExpression();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        multiplicativeExpression();
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void multiplicativeExpression() throws ParseException {
      SimpleNode jjtn001 = (SimpleNode)OlapQlParser.jjtCreate(JJTMULTIPLICATION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      arithmeticAtom();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
        case DIV:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
          jj_consume_token(MULT);
          break;
        case DIV:
          jj_consume_token(DIV);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        arithmeticAtom();
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void arithmeticAtom() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
      arithmeticExpression();
      jj_consume_token(35);
      break;
    case METADATA_OBJECT_NAME:
                                       SimpleNode jjtn001 = (SimpleNode)OlapQlParser.jjtCreate(JJTMETADATAOBJECT);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(METADATA_OBJECT_NAME);
      } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001, true);
                                       }
      }
      break;
    case MINUS:
    case FLOATING_POINT_LITERAL:
    case INTEGER_LITERAL:
      number();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void number() throws ParseException {
 /*@bgen(jjtree) Number */
  SimpleNode jjtn000 = (SimpleNode)OlapQlParser.jjtCreate(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOATING_POINT_LITERAL:
        jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  /** Generated Token Manager. */
  public OlapQlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x300000,0x80000000,0x2000000,0x2000000,0x200,0x100,0x2000080,0x2000000,0x400,0x40,0x36021000,0x1800,0x1800,0x6000,0x6000,0x16001000,0x1000,0x14000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x5,0x4,0x0,0x0,0x4,0x4,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x4,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public OlapQlParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public OlapQlParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new OlapQlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public OlapQlParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new OlapQlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public OlapQlParser(OlapQlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(OlapQlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[36];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
