/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. OlapQlParser.jj */
/*@egen*/options {                                             }

PARSER_BEGIN(OlapQlParser)
package br.com.bi.model.query.grammar;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class OlapQlParser/*@bgen(jjtree)*/implements OlapQlParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTOlapQlParserState jjtree = new JJTOlapQlParserState();

/*@egen*/

  private static boolean rows = false;
  private static boolean columns = false;

  public static void main(String args[]) {
        InputStream in = new ByteArrayInputStream(
              ("selecione {[teste], ([teste], [teste])}"
                + " nas colunas, [teste] nas linhas "
                + "do cubo [teste] "
                + "onde [teste] = 1 ou [teste] e n\u00e3o [teste] > (1 + 2 * 5)").getBytes());

        OlapQlParser parser = new OlapQlParser(in);
        try {
            SimpleNode node = parser.query();
            node.dump("   ");
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
  }
}
PARSER_END(OlapQlParser)

SKIP : { " " | "\t" | "\n" | "\r" | "\f" }

TOKEN [IGNORE_CASE] :
{
  < RELATIONAL_OPERATOR: ">" | "<" | ">=" | "<=" | "=" >
| < NOT: "n\u00e3o" >
| < AND: "e" >
| < OR: "ou" >
| < DOT: "." >
| < PLUS: "+" >
| < MINUS: "-" >
| < MULT: "*" >
| < DIV: "/" >
| < LBRA: "[" >
| < RBRA: "]" >
| < DATE: ((["0"-"9"])+ "/" (["0"-"9"])+ "/" (["0"-"9"])+) >
| < SELECT: "selecione" >
| < ON: "nas" >
| < ROWS: "linhas" >
| < COLUMNS: "colunas" >
| < FROM: "do" >
| < CUBE: "cubo" >
| < WHERE: "onde" >
| < METADATA_OBJECT_NAME: <LBRA> (~["[","]"])+ <RBRA> >
| < FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? 
                             | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? 
                             | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
                             | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"] >
| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < INTEGER_LITERAL : ["0"-"9"] (["0"-"9"])* >
| < STRING_LITERAL: "\"" (<CHAR>)* "\"" > 
| < #CHAR: (~["\""] | "\\" (["n","r","\\","\'","\""])) >
}

/* ==================== */
/* = Production rules = */
/* ==================== */

SimpleNode query()        : 
{/*@bgen(jjtree) Query */
  SimpleNode jjtn000 = new SimpleNode(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Query */
    try {
/*@egen*/
    <SELECT> axisSpecification() "," axisSpecification() <FROM> <CUBE> cube() <WHERE> filterExpression() <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void axisSpecification()                   : 
{/*@bgen(jjtree) AxisSpecification */
  SimpleNode jjtn000 = new SimpleNode(JJTAXISSPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} 
{/*@bgen(jjtree) AxisSpecification */
    try {
/*@egen*/
    set() <ON>  ( rows() | columns() )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void rows() : 
{

} 
{ 
    <ROWS>

    { 
        if (rows) 
            throw new ParseException("O eixo das linhas foi duplicado"); 
        else 
            rows = true;
    }

    { jjtn000.setName("ROWS"); }
}

void columns() : 
{
} 
{ 
    <COLUMNS>

    {
        if (columns) 
            throw new ParseException("O eixo das colunas foi duplicado"); 
        else 
            columns = true;
    }
}

void set()              : {} { node() | "{" node() ( "," node() )+ "}" }

void node()                 : {} {/*@bgen(jjtree) MetadataObject */
                                   {
                                     SimpleNode jjtn001 = new SimpleNode(JJTMETADATAOBJECT);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                   }
                                   try {
/*@egen*/ <METADATA_OBJECT_NAME>/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001, true);
                                     }
                                   }
/*@egen*/                 |/*@bgen(jjtree) Crossjoin */
                                                                            {
                                                                              SimpleNode jjtn002 = new SimpleNode(JJTCROSSJOIN);
                                                                              boolean jjtc002 = true;
                                                                              jjtree.openNodeScope(jjtn002);
                                                                            }
                                                                            try {
/*@egen*/ crossJoin()/*@bgen(jjtree)*/
                                                                            } catch (Throwable jjte002) {
                                                                              if (jjtc002) {
                                                                                jjtree.clearNodeScope(jjtn002);
                                                                                jjtc002 = false;
                                                                              } else {
                                                                                jjtree.popNode();
                                                                              }
                                                                              if (jjte002 instanceof RuntimeException) {
                                                                                throw (RuntimeException)jjte002;
                                                                              }
                                                                              if (jjte002 instanceof ParseException) {
                                                                                throw (ParseException)jjte002;
                                                                              }
                                                                              throw (Error)jjte002;
                                                                            } finally {
                                                                              if (jjtc002) {
                                                                                jjtree.closeNodeScope(jjtn002, true);
                                                                              }
                                                                            }
/*@egen*/            }

void crossJoin()            : {} { "("/*@bgen(jjtree) FirstSet */
                                       {
                                         SimpleNode jjtn001 = new SimpleNode(JJTFIRSTSET);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*/ set()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte001;
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           throw (ParseException)jjte001;
                                         }
                                         throw (Error)jjte001;
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001, true);
                                         }
                                       }
/*@egen*/           ","/*@bgen(jjtree) SecondSet */
                                                           {
                                                             SimpleNode jjtn002 = new SimpleNode(JJTSECONDSET);
                                                             boolean jjtc002 = true;
                                                             jjtree.openNodeScope(jjtn002);
                                                           }
                                                           try {
/*@egen*/ set()/*@bgen(jjtree)*/
                                                           } catch (Throwable jjte002) {
                                                             if (jjtc002) {
                                                               jjtree.clearNodeScope(jjtn002);
                                                               jjtc002 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte002 instanceof RuntimeException) {
                                                               throw (RuntimeException)jjte002;
                                                             }
                                                             if (jjte002 instanceof ParseException) {
                                                               throw (ParseException)jjte002;
                                                             }
                                                             throw (Error)jjte002;
                                                           } finally {
                                                             if (jjtc002) {
                                                               jjtree.closeNodeScope(jjtn002, true);
                                                             }
                                                           }
/*@egen*/            ")" }

void cube()                 : {/*@bgen(jjtree) Cube */
  SimpleNode jjtn000 = new SimpleNode(JJTCUBE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Cube */
                                   try {
/*@egen*/ <METADATA_OBJECT_NAME>/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }

/* ===================== */
/* = filter expression = */
/* ===================== */

void filterExpression()         : {/*@bgen(jjtree) Filter */
  SimpleNode jjtn000 = new SimpleNode(JJTFILTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Filter */
                                       try {
/*@egen*/ disjunction()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte000;
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           throw (ParseException)jjte000;
                                         }
                                         throw (Error)jjte000;
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
                                       }
/*@egen*/ }

void disjunction()              : {} {/*@bgen(jjtree) #Disjunction(> 1) */
                                       {
                                         SimpleNode jjtn001 = new SimpleNode(JJTDISJUNCTION);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*/ ( conjunction() ( <OR> conjunction() )* )/*@bgen(jjtree)*/
                                       } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte001;
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           throw (ParseException)jjte001;
                                         }
                                         throw (Error)jjte001;
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                         }
                                       }
/*@egen*/                 }

void conjunction()              : {} {/*@bgen(jjtree) #Conjunction(> 1) */
                                       {
                                         SimpleNode jjtn001 = new SimpleNode(JJTCONJUNCTION);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*/ ( term() ( <AND> term() )* )/*@bgen(jjtree)*/
                                       } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte001;
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           throw (ParseException)jjte001;
                                         }
                                         throw (Error)jjte001;
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                         }
                                       }
/*@egen*/                 }

void term()                     : {} { atom() | negation() }

void atom()                     : {} { comparison() | "(" filterExpression() ")"  }

void negation()                 : {/*@bgen(jjtree) Negation */
  SimpleNode jjtn000 = new SimpleNode(JJTNEGATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Negation */
                                       try {
/*@egen*/ <NOT> ( term() )/*@bgen(jjtree)*/
                                       } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte000;
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           throw (ParseException)jjte000;
                                         }
                                         throw (Error)jjte000;
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
                                       }
/*@egen*/ }

void comparison()               : {/*@bgen(jjtree) Comparison */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Comparison */
                                       try {
/*@egen*//*@bgen(jjtree) MetadataObject */
                                       {
                                         SimpleNode jjtn001 = new SimpleNode(JJTMETADATAOBJECT);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*/ ( <METADATA_OBJECT_NAME> )/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001, true);
                                         }
                                       }
/*@egen*/                 [ <DOT> <METADATA_OBJECT_NAME> ] [/*@bgen(jjtree) RelationalOperator */
                                                                                                                     {
                                                                                                                       SimpleNode jjtn002 = new SimpleNode(JJTRELATIONALOPERATOR);
                                                                                                                       boolean jjtc002 = true;
                                                                                                                       jjtree.openNodeScope(jjtn002);
                                                                                                                     }
                                                                                                                     try {
/*@egen*/ <RELATIONAL_OPERATOR>/*@bgen(jjtree)*/
                                                                                                                     } finally {
                                                                                                                       if (jjtc002) {
                                                                                                                         jjtree.closeNodeScope(jjtn002, true);
                                                                                                                       }
                                                                                                                     }
/*@egen*/                     operating() ]/*@bgen(jjtree)*/
                                       } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte000;
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           throw (ParseException)jjte000;
                                         }
                                         throw (Error)jjte000;
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
                                       }
/*@egen*/  } // [measure] > 1 or [level].[property] = "foo"

void operating()                : {} { <DATE> | <STRING_LITERAL> | arithmeticExpression() }

/* ========================= */
/* = arithmetic expression = */
/* ========================= */

void arithmeticExpression()     : {} { additiveExpression() }

void additiveExpression()       : {} { multiplicativeExpression() ( ( <PLUS> | <MINUS> ) multiplicativeExpression() )* }

void multiplicativeExpression() : {} { unaryExpression()/*@bgen(jjtree) #Multiplicaton(> 1) */
                                                         {
                                                           SimpleNode jjtn001 = new SimpleNode(JJTMULTIPLICATON);
                                                           boolean jjtc001 = true;
                                                           jjtree.openNodeScope(jjtn001);
                                                         }
                                                         try {
/*@egen*/ ( ( <MULT> | <DIV> ) unaryExpression() )*/*@bgen(jjtree)*/
                                                         } catch (Throwable jjte001) {
                                                           if (jjtc001) {
                                                             jjtree.clearNodeScope(jjtn001);
                                                             jjtc001 = false;
                                                           } else {
                                                             jjtree.popNode();
                                                           }
                                                           if (jjte001 instanceof RuntimeException) {
                                                             throw (RuntimeException)jjte001;
                                                           }
                                                           if (jjte001 instanceof ParseException) {
                                                             throw (ParseException)jjte001;
                                                           }
                                                           throw (Error)jjte001;
                                                         } finally {
                                                           if (jjtc001) {
                                                             jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                                           }
                                                         }
/*@egen*/                    }

void unaryExpression()          : {} { "(" arithmeticExpression() ")" | <METADATA_OBJECT_NAME> | number() }

void number()                   : {/*@bgen(jjtree) Number */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Number */
                                       try {
/*@egen*/ [ <MINUS> ] ( <INTEGER_LITERAL> | <FLOATING_POINT_LITERAL> )/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
                                       }
/*@egen*/  }
