options 
{ 
    STATIC = false;
    NODE_DEFAULT_VOID = true;
    NODE_PREFIX = ""; 
    MULTI = true;
    VISITOR = true;
    VISITOR_RETURN_TYPE = "void";
    VISITOR_DATA_TYPE = "StringBuilder";
}

PARSER_BEGIN (MeasureParser)
package br.com.bi.language.measure;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class MeasureParser {

    public static void main(String args[]) {
        InputStream in = new ByteArrayInputStream(
              ("soma(-1 / (100.8 + 2)) + [Total]").getBytes());

        MeasureParser parser = new MeasureParser(in);
        
        try {
            SimpleNode node = parser.measureExpression();
            node.dump(" ");
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
    }
}
PARSER_END (MeasureParser)

SKIP : { " " | "\t" | "\n" | "\r" | "\f" }

TOKEN [IGNORE_CASE] :
{
  < RELATIONAL_OPERATOR: ">" | "<" | ">=" | "<=" | "=" >
| < AGGREGATOR: "quantidade" | "média" | "máximo" | "mínimo" | "soma" >
| < IDENTIFIER: ("\"" (~["\""])* "\"") >
| < PLUS: "+" >
| < MINUS: "-" >
| < MULT: "*" >
| < DIV: "/" >
| < LBRA: "[" >
| < RBRA: "]" >
| < DATE: ((["0"-"9"])+ "/" (["0"-"9"])+ "/" (["0"-"9"])+) >
| < METADATA_OBJECT_NAME: <LBRA> (~["[","]"])+ <RBRA> >
| < FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? 
                             | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? 
                             | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
                             | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"] >
| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < INTEGER_LITERAL : ["0"-"9"] (["0"-"9"])* >
| < STRING_LITERAL: "\"" (<CHAR>)* "\"" | "'" (<CHAR>)* "'" > 
| < #CHAR: (~["\""] | "\\" (["n","r","\\","\'","\""])) >
}

SimpleNode measureExpression() #MeasureExpression :
{
}
{
    aggregationExpression() <EOF>

    {
        return jjtThis;
    }
}

void aggregationExpression() : 
{
}
{
    aggregationAdditiveExpression() 
}

void aggregationAdditiveExpression() #Addition(>1) :
{
    String op = null;
}
{
    ( aggregationMultiplicativeExpression() ( ( op = additiveOperator() ) aggregationMultiplicativeExpression() )* )

    {
        jjtThis.value = op;
    }
}

void aggregationMultiplicativeExpression() #Multiplication(>1) :
{
    String op = null;
}
{
    ( measureAtom() ( ( op = multiplicativeOperator() ) measureAtom() )* )

    {
        jjtThis.value = op;
    }
}

void measureAtom() :
{
}
{
    "(" aggregationExpression() ")" | aggregation() | measure()
}

void measure() #Measure : 
{
    Token t;
}
{
    t = <METADATA_OBJECT_NAME>

    {
        jjtThis.value = t.image;
    }
}

void aggregation() #Aggregation :
{
    Token t;
}
{
    t = <AGGREGATOR> 

    "(" arithmeticExpression() ")"

    {
        jjtThis.value = t.image;
    }
}

void arithmeticExpression() : 
{
}
{
    additiveExpression() 
}

void additiveExpression() #Addition(>1) :
{
    String op = null;
}
{
    ( multiplicativeExpression() ( ( op = additiveOperator() ) multiplicativeExpression() )* )

    {
        jjtThis.value = op;
    }
}

String additiveOperator() :
{
    Token t;
}
{
    ( t = <PLUS> | t = <MINUS> )

    {
        return t.image;
    }
}

void multiplicativeExpression() #Multiplication(>1) :
{
    String op = null;
}
{
    ( arithmeticAtom() ( ( op = multiplicativeOperator() ) arithmeticAtom() )* )

    {
        jjtThis.value = op;
    }
}

String multiplicativeOperator() :
{
    Token t;
}
{
    ( t = <MULT> | t = <DIV> )

    {
        return t.image;
    }
}

void arithmeticAtom() :
{
}
{
    "(" arithmeticExpression() ")" | column() | number()
}

void column() #Column :
{
    Token column;
}
{
    column = <IDENTIFIER>

    {
        jjtThis.value = column.image;
    }
}

void number() #Number :
{
    Token minus = null;
    Token number;
}
{
    [ minus = <MINUS> ]

    ( number = <INTEGER_LITERAL> | number = <FLOATING_POINT_LITERAL> )

    {
        jjtThis.value = minus == null ? number.image : minus.image + number.image;
    }
}
